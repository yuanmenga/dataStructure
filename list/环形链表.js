var hasCycle = function (head) {
  // 定义两个指针 p1 和 p2，将它们都初始化为链表的头结点 head
  let p1 = head;
  let p2 = head;
  // 使用循环进行迭代，条件是 p1、p2 存在，并且 p2 的下一个节点也存在
  while (p1 && p2 && p2.next) {
    // 移动 p1 指针，使其前进一个节点
    p1 = p1.next;
    // 移动 p2 指针，使其前进两个节点
    p2 = p2.next.next;
    // 检查是否 p1 和 p2 指向同一个节点，如果相同则说明链表中有循环，返回 true
    if (p1 === p2) {
      return true;
    }
  }
  // 循环结束后，如果没有找到循环，则返回 false
  return false;
};
// 这段代码使用了所谓的“快慢指针”算法来检测链表是否有循环。p1 指针每次前进一个节点，而 p2 指针每次前进两个节点。如果链表中有循环，p2 最终会“追赶上” p1，这时候两个指针会指向同一个节点，即 p1 === p2。这个判断就是用来检测循环的存在。如果循环结束后都没有找到循环，那么返回 false，表示链表没有循环。
